PROCEDURE      INC_REPORTS.FINDTEXT:T  (157221,45287)  |Last amended Mar 29, 2013,12:34:47
c Search for text in a record type.  Searches all variables.
c
c must re-set the globals to first record type, first var
program
ANYNUM__4 = 0<GDBREC>
ifthen(ANYNUM__4 eq 9999 OR 0)
. for EACH_RECORD_NUMBER  = 1,  nrecs(0)
.   IFNOT (LEN(RECNAME(EACH_RECORD_NUMBER)) gt 0) NEXT FOR
.   ANYNUM__4 = globaln('GDBREC', EACH_RECORD_NUMBER)
.   EXIT FOR
. end for
endif
end program

retrieval crwarn noautocase
CALL WPF.SYSTEM.DEFINE_VARS
CALL WPF.SYSTEM.INI_VARS

set ANYNUM__4 (0)
set COUNTS__4  (0)

write(cgi) '<h3>Find Text'
write(cgi) '  <br>This cycles through every variable.  It takes a while.'
write(cgi) '  <br>It is recommended to use Query for faster results</h3>'
write(cgi) '<form name="findtext" action="<mycgi>" method="post" >'
write(cgi) '<input type="hidden" id="member" name="member" value="WPF.INC_REPORTS.FINDTEXT">'
CALL WPF.INC_ELEMENTS.GDB_REC | NECESSARY FOR PASSING THE RECORD TYPE NUMBER
CALL WPF.INC_ELEMENTS.CASE_IS | To remember the last case they were on

write(cgi) '  <table class="table table-striped table-hover"><tr>'
write(cgi) '  <th>Choose a table</th><th>Text to find</th><th>&nbsp;</th></tr>'
write(cgi) '  <tr class="padded"><td><select class="widthwide" id ="recselect" onchange="document.getElementById(''gdbrec'').value = document.getElementById(''recselect'').value;">'

for EACH_RECORD_NUMBER  = 1, nrecs(0)
. IFNOT (LEN(RECNAME(EACH_RECORD_NUMBER)) gt 0) NEXT FOR
. ifthen (len(trimlr(recdoc(EACH_RECORD_NUMBER, 0))) gt 0)
.   REC_LABEL__4 = trimlr(recdoc(EACH_RECORD_NUMBER, 0))
. elseif (len(trimlr(recdoc(EACH_RECORD_NUMBER, 1))) gt 0)
.   REC_LABEL__4 = trimlr(recdoc(EACH_RECORD_NUMBER, 1))
. else
.   REC_LABEL__4 = trimlr(recname(EACH_RECORD_NUMBER))
. endif
. STR$1 =  'value="' + format(EACH_RECORD_NUMBER )  + '"'
. STR$2 = 'title="'  + format(EACH_RECORD_NUMBER) + ': ' + trimlr(recname(EACH_RECORD_NUMBER))  + '"'
. if (nglobal('GDBREC') eq EACH_RECORD_NUMBER) STR$2 = STR$2 + 'selected="selected"'
. write(cgi) 4t '<option ' STR$1 ' ' STR$2    ' >'
. write(cgi) 4t REC_LABEL__4 '</option>'
end for
REC_TYPE_NUMBER = nglobal('GDBREC')
ifthen (len(trimlr(recdoc(REC_TYPE_NUMBER, 0))) gt 0)
. REC_LABEL__4 = trimlr(recdoc(REC_TYPE_NUMBER, 0))
elseif (len(trimlr(recdoc(REC_TYPE_NUMBER, 1))) gt 0)
. REC_LABEL__4 = trimlr(recdoc(REC_TYPE_NUMBER, 1))
else
. REC_LABEL__4 = trimlr(recname(REC_TYPE_NUMBER))
endif

write(cgi) '  </select><br>'
write(cgi) '  </td>'
write(cgi) '  <td><input type="text" name="webvalue1" class="widthwide" onchange="settexts()" value="<GVALUE1>"></td>'
write(cgi) '  <td class="padded" colspan="4"> <input type="submit" name="submit" class="btn btn-primary" value="Find Text"> '
write(cgi) '  </td></tr>'
write(cgi) '</table>'
write(cgi) '  <p class="left">'
write(cgi) '  Options<br>'
ifthen(nglobal('GEXACTMATCH') eq 1) STR$1 = ' checked'
else STR$1 =''
endif
write(cgi) '  <input type="checkbox" id="exactmatch"  name="exactmatch" value="1"' STR$1 '><label for="exactmatch">Exact Match</label><br>'

ifthen(nglobal('GCASEMATCH') eq 1) STR$1 = ' checked'
else STR$1 =''
endif
write(cgi) '  <input type="checkbox" id="casematch" name="casematch" value="1"' STR$1 '><label for="casematch">Case Sensitive</label>'
write(cgi) '</p>'

CIF EQ 'Find Text', '<GSUBMIT>'
. QSTR__4 = sglobal('GVALUE1')
. ifnot (nglobal('GCASEMATCH') eq 1) QSTR__4 = trimlr(upper(sglobal('GVALUE1')))

. write(cgi) '<h4>Find Text Results in ' REC_LABEL__4
c show keys for each record type
. STR$2 =': No Keys'
. ifthen (nkeys(REC_TYPE_NUMBER) eq 1)
.   STR$2 =': Key: '
. elseif  (nkeys(REC_TYPE_NUMBER) gt 1)
.   STR$2 =': Keys: '
. endif
. for EACH_KEY = 1 + dbtype(0), nkeys(REC_TYPE_NUMBER) + dbtype(0)
.   STR$1 = pack(keyname(REC_TYPE_NUMBER, EACH_KEY))
.   if (exists(STR$1) eq 1) STR$2 = STR$2 + STR$1
.   if(EACH_KEY ne (nkeys(REC_TYPE_NUMBER) + dbtype(0)) ) STR$2 = STR$2  + ','
. end for
. write(cgi) STR$2
. write(cgi) '</h4>'
. write(cgi) '<table  class="table table-striped table-hover">'
. write(cgi) '<tr><th>Table</th><th>Keys</th><th>Variable</th><th>Value</th></tr>'
. CIF EQ 1, 0<GCASED>
. process cases
. CIF END
. process rec <GDBREC>
.   GOON__4   = 1
.   set STR__4   (missing)
.   set NUM__4   (missing)
.   for EACH_VARIABLE = 1, nvarsc(REC_TYPE_NUMBER)
.     VNAME$ = trimlr(varnamec(REC_TYPE_NUMBER, EACH_VARIABLE))
.     VNAME$CB = stdname(VNAME$)
.     if (VNAME$ eq 'DCCEDITS' or 'DCCWHO' or 'DSTAMP' or 'DCCTIME' or 'DCCDATE') NEXT FOR
.     SIR_VARTYPE = vtype(REC_TYPE_NUMBER, VNAME$CB)
.     ifthen (SIR_VARTYPE eq 3) |Date
.       SIR_VARFORMAT  = datemap(REC_TYPE_NUMBER, VNAME$)
.     elseif (SIR_VARTYPE eq 4) |Time
.       SIR_VARFORMAT  = timemap(REC_TYPE_NUMBER, VNAME$)
.     endif
.     ifthen (SIR_VARTYPE eq 3) |Date
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, 'D', '', 1, 1, 0)
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, 'T', '', 1, 1, 0)
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, 'E', '', 1, 1, 0)
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, "'", '', 3, 1, 0)
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, "I", '/', 3, 1, 0)
.     elseif (SIR_VARTYPE eq 4) |Time
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, 'T', '', 1, 1, 0)
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, 'E', '', 1, 1, 0)
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, "'", '', 3, 1, 0)
.       SIR_VARFORMAT = replace(SIR_VARFORMAT, "I", ':', 3, 1, 0)
.     endif
.     ifthen(SIR_VARTYPE eq 3) |Date
.       STRING_VARGET = datec(nget(VNAME$CB), SIR_VARFORMAT)
.     elseif(SIR_VARTYPE eq 4) |Time
.       STRING_VARGET = timec(nget(VNAME$CB), SIR_VARFORMAT)
.     else
.       STRING_VARGET = varget(VNAME$CB)
.     endif
.     ifnot (nglobal('GCASEMATCH') eq 1) STRING_VARGET = trimlr(upper(STRING_VARGET))
.     ifthen(nglobal('GEXACTMATCH') eq 1)
.       ifthen (STRING_VARGET eq QSTR__4)
.         execute subprocedure START_ROW
.         write(cgi) '<td>' vname$ '</td><td>' STRING_VARGET '</td></tr>'
.       endif
.     else
.       ifthen (pattern(STRING_VARGET, '@' + QSTR__4 + '@') eq 1)
.         execute subprocedure START_ROW
.         write(cgi) '<td>' vname$ '</td><td>' STRING_VARGET '</td></tr>'
.       endif
.     endif
.  end for
.   IF (COUNTS__4 gt 500) EXIT RECORD | stop processing RECORD
. end rec
. CIF EQ 1, 0<GCASED>
.   IF (COUNTS__4 gt 500) EXIT CASES  | stop processing cases
. CIF END

. CIF EQ 1, 0<GCASED>
. end cases
. CIF END
CIF END
write(cgi) '</table>'
write(cgi) '</form>'
if(COUNTS__4 gt 500) write(cgi) '<p>Report limited to first 500 results<p>'
if(COUNTS__4 eq 0) write(cgi) '<p><strong>Nothing was returned</strong></p>'
write(cgi) '<p><em>note: can not be used to search DCC variables, DCCWHO etc.</em><p>'
write(cgi) '<p><em>Search missing values comming soon</em></p>'


subprocedure START_ROW
. COUNTS__4 = COUNTS__4  + 1
. SHOWKEYS__4 = ''
. STR$1 = '<tr>'
. write(cgi) STR$1
. STR$1 = '<a class="bluetext" href = "<mycgi>?member=WPF.CONTROLER.REC_NAV&amp;upick=View&amp;gdbrec=' + sglobal('GDBREC')
. ifthen (dbtype(0) eq 1)
.   KEYVNAME__4 = pack(keyname(REC_TYPE_NUMBER, 1))
.   KEYVALUE__4 = trimlr(varget(KEYVNAME__4))
.   STR$1 = STR$1 + '&amp;caseis=' + KEYVALUE__4
.   SHOWKEYS__4 = SHOWKEYS__4 + KEYVNAME__4 +  ':<b> ' + KEYVALUE__4 + '</b><br> '
. endif
. for EACH_KEY = 1 + dbtype(0), nkeys(REC_TYPE_NUMBER) +  dbtype(0)
.   KEYVNAME__4 = pack(keyname(REC_TYPE_NUMBER, EACH_KEY))
.   KEYVALUE__4 = trimlr(varget(KEYVNAME__4))
.   STR$1 = STR$1 +  '&amp;key' + format(EACH_KEY) + '=' + KEYVALUE__4
.   SHOWKEYS__4 = SHOWKEYS__4 + KEYVNAME__4 +  ':<b> ' + KEYVALUE__4  + '</b><br> '
. end for
. STR$1 = STR$1  + '">'
. if (len(SHOWKEYS__4) eq 0) SHOWKEYS__4 = '&nbsp;'
. write(cgi) '  <td title="' [pack(recname(REC_TYPE_NUMBER))]'">'
. write(cgi) '    ' REC_LABEL__4 '</td>'
. write(cgi) '  <td>' STR$1  SHOWKEYS__4 '</a></td>'
end subprocedure

end retrieval
END PROCEDURE
