PROCEDURE      INC_REPORTS.KEYMAP:T  (157221,40874)  |Last amended Mar 29, 2013,11:21:14
| Record Type Key Maps

program crwarn
CALL WPF.SYSTEM.DEFINE_VARS
CALL WPF.SYSTEM.INI_VARS

. set REC_LABEL__4 ('')

. write(cgi) '<h3>Record Key Map for the ' DBNAME__4 ' Database </h3>'
|Index of Record Types
. for EACH_RECORD_NUMBER = 1 - dbtype(0),  nrecs(0)
.   EACH_VARIABLE = nvarsc(EACH_RECORD_NUMBER)
.   if (EACH_VARIABLE eq 0) next for
.   REC_NAME__4 = trim(recname(EACH_RECORD_NUMBER))
.   write(cgi) '<p>' REC_NAME__4
.   REC_LABEL__4 = trimlr(recdoc(EACH_RECORD_NUMBER, 0))
.   ifthen (len(REC_LABEL__4) < 1 and REC_NAME__4 = 'CIR')
.     REC_LABEL__4 = 'Common Information Record'
.   elseif ((len(REC_LABEL__4) < 1) or (exists(REC_LABEL__4) eq 0))
.     REC_LABEL__4 = trimlr(recdoc(EACH_RECORD_NUMBER, 1))
.   endif
.   STR$1 = 'href="<mycgi>?member=WPF.INC_BODY_CODEBOOK.REC_TYPE&amp;gdbrec=' + format(EACH_RECORD_NUMBER)  + '"'
.   write(cgi) '<a ' STR$1  '><span>' REC_LABEL__4 '</a>'
c .   write(cgi) '<a class="bluetext textbold" ' STR$1  '><span>' REC_LABEL__4 '</a>'
.   write(cgi) '<br>'
.   if(dbtype(0) eq nkeys(EACH_RECORD_NUMBER) + 1 ) write(cgi) 'No Keys'
.   for EACH_KEY = 1, nkeys(EACH_RECORD_NUMBER)
.     VNAME$  = trimlr(keyname(EACH_RECORD_NUMBER, EACH_KEY + dbtype(0)))
.     VAR_LABEL = trimlr(varlabsc(EACH_RECORD_NUMBER, VNAME$))
.     STR$1 = '<span class="textbold"> ' + VNAME$ + '</span>, "' + VAR_LABEL + '"'
.     write(cgi) ' &deg; Key' EACH_KEY ': 'STR$1
.     execute subprocedure MAKE_FORMAT
.   end for
. write(cgi) '</p>'
. write(cgi) '<hr>'
. end for

|
. subprocedure MAKE_FORMAT
| Type
.   ifthen (vtype(EACH_RECORD_NUMBER, VNAME$) eq 1) |  string
.     STR$1 = 'Text (' + vformat(EACH_RECORD_NUMBER, VNAME$) + ')'
.   elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 2) |  categorical
.     STR$1 = 'Categorical: ' + vformat(EACH_RECORD_NUMBER, VNAME$)
.   elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 3) |  date
.     STR$1 = 'Date (' + datemap(EACH_RECORD_NUMBER, VNAME$) + ')'
.   elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 4) |  time
.     STR$1 = 'Time (' + timemap(EACH_RECORD_NUMBER, VNAME$) + ')'
.   elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 5) |  integer
.     STR$1 = 'Integer' | vformat(EACH_RECORD_NUMBER, VNAME$)
.   elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 6) |  real (single precision)
.     STR$1 = 'Decimal' | vformat(EACH_RECORD_NUMBER, VNAME$)
.   elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 7) |  real (double precision)
.     STR$1 = 'Decimal' | vformat(EACH_RECORD_NUMBER, VNAME$)
.   elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 8) |  scaled variable
.     STR$1 = vformat(EACH_RECORD_NUMBER, VNAME$)
.   endif
.   write(cgi) '<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' STR$1
| Range
.   ifthen (exists(nmin(EACH_RECORD_NUMBER, VNAME$)) AND exists(nmax(EACH_RECORD_NUMBER, VNAME$)))
.     ifthen (vtype(EACH_RECORD_NUMBER, VNAME$) eq 3) |  date
.       STR$1 = 'Range: ' + datec(nmin(EACH_RECORD_NUMBER, VNAME$), 'mm/dd/yyyy') + ' - ' + datec(NMAX(EACH_RECORD_NUMBER, VNAME$), 'mm/dd/yyyy')
.     elseif (vtype(EACH_RECORD_NUMBER, VNAME$) eq 4) |  time
.       STR$1 = 'Range: ' + timec(nmin(EACH_RECORD_NUMBER, VNAME$), 'hh:mm') + ' - ' + timec(NMAX(EACH_RECORD_NUMBER, VNAME$), 'hh:mm')
.     else
.       STR$1 = 'Range: ' + format(nmin(EACH_RECORD_NUMBER, VNAME$)) + ' - ' + format(NMAX(EACH_RECORD_NUMBER, VNAME$))
.     endif
.     STR$1 = STR$1 + '<br>'
.     write(cgi) STR$1
.   elseif (exists(smin(EACH_RECORD_NUMBER, VNAME$)) AND exists(smax(EACH_RECORD_NUMBER, VNAME$)))
.     STR$1 = 'Range: ' + smin(EACH_RECORD_NUMBER, VNAME$) +  ' - ' + SMAX(EACH_RECORD_NUMBER, VNAME$)
.     write(cgi) STR$1
.   endif
| Value Labels and Valid Values
.   ifthen (nvallab(EACH_RECORD_NUMBER, VNAME$) > 0)
.     write(cgi)'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value Labels:<br><span style="float:left; padding-left: 30px; padding-right: 40px;">'
.     for EACH_LABEL = 1, nvallab(EACH_RECORD_NUMBER, VNAME$)
.       VALLAB_VALUE = trim(vallabsn(EACH_RECORD_NUMBER, VNAME$, EACH_LABEL))
.       write(cgi) ['(' + vallabsv(EACH_RECORD_NUMBER, VNAME$, EACH_LABEL) + ') ' + VALLAB_VALUE]
.     end for
.     write(cgi) '</span><br>'

.   elseif (nvalid(EACH_RECORD_NUMBER, VNAME$) > 0)
.     STR$1 = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valid Values: '
.     for EACH_VALID_VALUE = 1,  nvalid(EACH_RECORD_NUMBER, VNAME$)
.       STR$1 = STR$1 + format(nvval(EACH_RECORD_NUMBER, VNAME$, EACH_VALID_VALUE)) + ',  '
.     end for
.     STR$1 = sbst(STR$1, 1, len(trim(STR$1)) - 1) + '<br>'
.     write(cgi) STR$1
.   endif
| Missing

.   STR$1 = ''
.   for EACH_MISSING_VALUE = 1, 3
.     STR$1 = STR$1  + miss(EACH_RECORD_NUMBER, VNAME$, EACH_MISSING_VALUE)  | if any missing value is defined (can have 2nd but not 1st) then add missing values to schema doc
.   end for
.   ifthen (len(trim(STR$1)) gt 0)
.     STR$1 = '(' + trim(miss(EACH_RECORD_NUMBER, VNAME$, 1)) + ')'
.     write(cgi)'<br>Missing Values: 1st ' STR$1
.     ifthen (exists(miss(EACH_RECORD_NUMBER, VNAME$, 2)) eq 1)
.       STR$1 = '(' + trim(miss(EACH_RECORD_NUMBER, VNAME$, 2)) + ')'
.       write(cgi) '2nd ' STR$1
.     endif
.     ifthen (exists(miss(EACH_RECORD_NUMBER, VNAME$, 3)) eq 1)
.       STR$1 = '(' + trim(miss(EACH_RECORD_NUMBER, VNAME$, 3)) + ')'
.       write(cgi) '3rd ' STR$1
.     endif
.   endif
. end subprocedure

end program
END PROCEDURE
