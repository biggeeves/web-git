PROCEDURE      INC_REPORTS.QUERY_2:T  (157221,47124)  |Last amended Mar 29, 2013,13:05:24
C QUERY

retrieval crwarn
CALL WPF.SYSTEM.DEFINE_VARS
CALL WPF.SYSTEM.INI_VARS

set SUM_EXISTS  (0)
QNUM__4  = nglobal('GVALUE1')
QSTR__4  = upper(sglobal('GVALUE1'))
VNUM__4  = nglobal('VNUM__4')
if(exists(VNUM__4) eq 0) VNUM__4 = 0

VNAME$    = trimlr(varnamec(REC_TYPE_NUMBER, VNUM__4))
VAR_LABEL   = trimlr(varlabsc(REC_TYPE_NUMBER, VNAME$))
ifnot (len(VAR_LABEL) gt 0) VAR_LABEL  = VNAME$

SIR_VARTYPE = vtype(REC_TYPE_NUMBER, VNAME$)
for EACH_MISSING_VALUE = 0, 3
. if(miss(REC_TYPE_NUMBER,  VNAME$ ,  EACH_MISSING_VALUE) eq QSTR__4) ISMISS__4 = EACH_MISSING_VALUE; exit for
end for

if(len(QSTR__4) eq 0) ISMISS__4 = 0


ifthen (SIR_VARTYPE ge 5)
. VAR_MIN#  = nmin(REC_TYPE_NUMBER, VNAME$)
. VAR_MAX#  = nmax(REC_TYPE_NUMBER, VNAME$)
endif
ifthen (SIR_VARTYPE eq 3) |Date
. SIR_VARFORMAT  = datemap(REC_TYPE_NUMBER, VNAME$)
. QNUM__4  = cdate(QSTR__4, SIR_VARFORMAT)
elseif (SIR_VARTYPE eq 4) |Time
. SIR_VARFORMAT  = timemap(REC_TYPE_NUMBER, VNAME$)
. QNUM__4  = ctime(QSTR__4, SIR_VARFORMAT)
endif

ifthen (SIR_VARTYPE eq 3) |Date
. SIR_VARFORMAT = replace(SIR_VARFORMAT, 'D', '', 1, 1, 0)
. SIR_VARFORMAT = replace(SIR_VARFORMAT, 'T', '', 1, 1, 0)
. SIR_VARFORMAT = replace(SIR_VARFORMAT, 'E', '', 1, 1, 0)
. SIR_VARFORMAT = replace(SIR_VARFORMAT, "'", '', 3, 1, 0)
. SIR_VARFORMAT = replace(SIR_VARFORMAT, "I", '/', 3, 1, 0)
elseif (SIR_VARTYPE eq 4) |Time
. SIR_VARFORMAT = replace(SIR_VARFORMAT, 'T', '', 1, 1, 0)
. SIR_VARFORMAT = replace(SIR_VARFORMAT, 'E', '', 1, 1, 0)
. SIR_VARFORMAT = replace(SIR_VARFORMAT, "'", '', 3, 1, 0)
. SIR_VARFORMAT = replace(SIR_VARFORMAT, "I", ':', 3, 1, 0)
endif


write(cgi)  '<h4>Results:<br>Table: 'REC_LABEL__4 '<br>'
c show keys for each record type
STR$2  = 'Table has no key fields'
ifthen (nkeys(REC_TYPE_NUMBER) eq 1)
. STR$2  = 'Table is keyed by '
elseif  (nkeys(REC_TYPE_NUMBER) gt 1)
. STR$2  = 'Table has following key fields: '
endif
for EACH_KEY = 1 + dbtype(0), nkeys(REC_TYPE_NUMBER) + dbtype(0)
. STR$1 = pack(keyname(REC_TYPE_NUMBER, EACH_KEY))
. if (exists(STR$1) eq 1) STR$2 = STR$2 + STR$1
. if(EACH_KEY ne (nkeys(REC_TYPE_NUMBER) + dbtype(0)) ) STR$2 = STR$2  + ','
end for
write(cgi) STR$2
write(cgi) '<br>' VAR_LABEL '<GOPERATOR> <GVALUE1>'
write(cgi) '</h4>'

write(cgi)  '<table class="table table-striped table-hover">'
write(cgi)  '<tr><th>Value</th><th>Value label</th><th>Keys</th></tr>'
CIF EQ 1, 0<GCASED>
process cases | count =30
CIF END
. process rec <GDBREC>
.   set MISSNUM__4 (missing)
.   set NUM__4   (missing)
.   set STR__4   (missing)
.   compute SHOWKEYS__4 = ''
.   ifthen (SIR_VARTYPE le 2)
.     STR__4 = sget(VNAME$); MISSNUM__4  = misnum(STR__4)
.   else
.     NUM__4 = nget(VNAME$); MISSNUM__4  = misnum(NUM__4)
.   endif
.   ifthen(MISSNUM__4 eq ISMISS__4)
.     execute subprocedure START_ROW
.     ifthen (ISMISS__4 eq 0)
.       write(cgi) 2t '<td>blank</td><td>&nbsp;</td>'
.     else
.       VALLAB_VALUE = fst(trimlr(vallabsc(REC_TYPE_NUMBER, VNAME$, QSTR__4)), "&nbsp;")
.       write(cgi) 2t '<td>' [trimlr(miss(REC_TYPE_NUMBER, VNAME$, MISSNUM__4))] '</td><td>' VALLAB_VALUE   '</td>'
.     endif
.     execute subprocedure END_ROW
.   else
c     not a missing value
.     ifthen (SIR_VARTYPE eq 1 or 2)
.       ifthen (upper(STR__4) <GOPERATOR> QSTR__4)
.         execute subprocedure START_ROW
.         VALLAB_VALUE = fst(vallabsc(REC_TYPE_NUMBER, VNAME$, STR__4), "&nbsp;")
.         write(cgi) 2t '<td>' STR__4 '</td><td>' VALLAB_VALUE  '</td>'
.         execute subprocedure END_ROW
.       endif
.     elseif (SIR_VARTYPE ge 3)
.       ifthen (NUM__4 <GOPERATOR> QNUM__4)
.         execute subprocedure START_ROW
.         ifthen(SIR_VARTYPE eq 3)
.           write(cgi) 2t'<td>' [datec(NUM__4, SIR_VARFORMAT)] '</td><td>'
.         elseif(SIR_VARTYPE eq 4)
.           write(cgi) 2t'<td>' [timec(NUM__4, SIR_VARFORMAT)] '</td><td>'
.         else
.           write(cgi) 2t '<td>' NUM__4 '</td><td>'
.         endif
.         VALLAB_VALUE = fst( pack(vallabsc(REC_TYPE_NUMBER, VNAME$, NUM__4)), "&nbsp;")
.         write(cgi)  VALLAB_VALUE '</td>'
.         execute subprocedure END_ROW
.       endif
.     endif
.   endif

. end rec
CIF EQ 1, 0<GCASED>
end cases
CIF END

ifthen (SUM_EXISTS eq 0)
. write(cgi)  '<tr  class="warning"><td colspan = "4"> Nothing matched that criteria</td></tr>'
else
. write(cgi)  '<tr><td colspan = "3"> Total: ' SUM_EXISTS  '</td></tr>'
endif

c display Mins and Maxs
ifthen (SIR_VARTYPE ge 5)
. if(exists(VAR_MIN#) eq 1) write(cgi)  '<tr><td colspan = "3"> Minimum found: ' VAR_MIN# '</td></tr>'
. if(exists(VAR_MAX#) eq 1) write(cgi)  '<tr><td colspan = "3"> Maximum found: ' VAR_MAX# '</td></tr>'
endif
write(cgi)  '</table>'

write(cgi) '<script type="text/javascript">'
write(cgi) ' whichrec(''<gdbrec>'',''varselect'');'
write(cgi) ' document.getElementById(''gdbrec'').value =<gdbrec>;'
write(cgi) ' document.getElementById(''varselect'').value =<VNUM__4>;'
write(cgi) '</script>'


subprocedure START_ROW
.   SUM_EXISTS = SUM_EXISTS  + 1
.   ifthen (SIR_VARTYPE ge 3)
.     ifNOT (VAR_MIN# lt NUM__4) VAR_MIN# = NUM__4
.     ifNOT (VAR_MAX# gt NUM__4) VAR_MAX# = NUM__4
.   endif
.   write(cgi) '<tr>'
end subprocedure

subprocedure END_ROW
.   STR$1 = '<a class="bluetext" href="<mycgi>?member=WPF.CONTROLER.REC_NAV&amp;upick=View&amp;gdbrec=' + format(REC_TYPE_NUMBER) + ''
.   ifthen (dbtype(0) eq 1)
.     compute KEYVNAME__4 = pack(keyname(REC_TYPE_NUMBER, 1))
.     STRING_VARGET = trimlr(varget(KEYVNAME__4))
.     compute SHOWKEYS__4 = SHOWKEYS__4 + KEYVNAME__4 +  ':<b> ' + STRING_VARGET + '</b><br> '
.     STR$1 = STR$1 + '&amp;caseis=' + STRING_VARGET
.   endif
.   for EACH_KEY = 1 + dbtype(0), nkeys(REC_TYPE_NUMBER) +  dbtype(0)
.     compute KEYVNAME__4 = pack(keyname(REC_TYPE_NUMBER, EACH_KEY))
.     STRING_VARGET = trimlr(varget(KEYVNAME__4))
.     STR$1 = STR$1  + '&amp;key' + format(EACH_KEY - dbtype(0)) + '=' + STRING_VARGET
.     compute SHOWKEYS__4 = SHOWKEYS__4 + KEYVNAME__4 +  ':<b> ' + STRING_VARGET  + '</b><br> '
.   end for
.   STR$1 = STR$1 + '">'
.   if (len(SHOWKEYS__4) eq 0) SHOWKEYS__4 = '&nbsp;'
.   write(cgi) '  <td>' STR$1 SHOWKEYS__4 '</a></td></tr>'
end subprocedure
end retrieval
END PROCEDURE
